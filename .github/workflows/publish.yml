name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binary:
    name: Build Rust Binary (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Create Cross.toml 
        run: |
          cat > stock-manager/Cross.toml << 'EOF'
          [target.aarch64-unknown-linux-gnu]
          image = "ghcr.io/cross-rs/aarch64-unknown-linux-gnu:latest"
          pre-build = [
          "apt-get update",
          "apt-get install -y --no-install-recommends libssl-dev:arm64 libpq-dev:arm64"
          ]
          [target.aarch64-unknown-linux-gnu.env]
          passthrough = [
            "RUST_BACKTRACE",
            "RUST_LOG",
          ]

          [target.x86_64-unknown-linux-gnu]
          image = "ghcr.io/cross-rs/x86_64-unknown-linux-gnu:latest"
          pre-build = [
          "apt-get update",
          "apt-get install -y --no-install-recommends libssl-dev libpq-dev"
          ]
          [target.x86_64-unknown-linux-gnu.env]
          passthrough = [
            "RUST_BACKTRACE",
            "RUST_LOG",
          ]
          EOF

      - name: Install cross
        run: cargo install cross

      - name: Build binary
        run: |
          cd stock-manager
          cross build --release --target ${{ matrix.target }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: stock-web-server-${{ matrix.target }}
          path: stock-manager/target/${{ matrix.target }}/release/stock-web-server
          retention-days: 1

  # Rest of the workflow remains the same
  publish-image:
    needs: build-binary
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: stock-web-server-x86_64-unknown-linux-gnu
          path: ./stock-manager/target/x86_64-unknown-linux-gnu/release/

      - name: Download ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: stock-web-server-aarch64-unknown-linux-gnu
          path: ./stock-manager/target/aarch64-unknown-linux-gnu/release/

      - name: Make binaries executable
        run: |
          chmod +x ./stock-manager/target/x86_64-unknown-linux-gnu/release/stock-web-server
          chmod +x ./stock-manager/target/aarch64-unknown-linux-gnu/release/stock-web-server

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: ./stock-manager
          file: ./stock-manager/Dockerfile.multiarch
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
